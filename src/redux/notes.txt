Redux es un state management se encarga de preservar el estado global de la app
y de distribuirlo a cualquier componente que sea necesario.

este se conofrma de actions, reducers y la store

la información o estado en redux se maneja en la store y esta es un mega objeto 
el cual centraliza toda la información, es decir solo existe un punto donde se 
encuentra toda la información a diferencia de zunstand por ejemplo que puede tener 
varias stores

el estado es meramente read-only es decir que no lo puedes actualizar directamente
para actualizarlo o modificarlo necesitas recorres el flujo (view,"dispatch", action, "middlewares", reducer, store)

los Reducers son los que se encargan de modificar la store y estos deben ser funciones
puras


entre actions y reducers existe algo llamado middlewares que son los que se encargan 
de hacer el trabajo asincrono


Reducers (ejemplo complementario en actions/notes.txt)
+ se encarga de seccionar y consumir la store
son funciones puras(no podemos hacer llamadas a API por ejemplo) y se encargan de actualizar la store o el estado dependiendo el action que se disparó
un ejmplo podria ser

function pokemonsApp(state = initialState /* en caso que el state esté vacio */, action){
  swithc(action.type){
    case: ADD_POKEMON:
      return {
        ...state.allPokemons,
        {
          nombre: action.nombre,
          genero: action.genero
        }
      }
  }
}

RTK query
es una alternativa a fetch o axios. Herramienta para data fetching y catching. utiliza fetch
facilita trabajar con loaders
utiliza catching guardando la respose en la store y comparando si el reqest nuevo es el mismo 
para prevenir peticiones repetidas en rerenderizados

para definir la configuracion de un endpoint se utiliza createApi();
regresa un objeto de hooks dependiendo los endpoints definidos dentro de el.
createApi evita el uso de actions y de reducers

hace uso de fetchBaseQuery() es un wrapper de fetch()
